import cv2
import numpy as np
import os
from math import pi, atan2, asin
from glob import glob
import argparse
import sys
import xml.dom.minidom as minidom
import datetime
from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor
from multiprocessing import cpu_count
import threading
from functools import partial
import tkinter as tk
from tkinter import filedialog
import shutil

CUBE_SIZE = 1920
MAX_WORKERS = min(cpu_count(), 8)  # Gi·ªõi h·∫°n s·ªë worker ƒë·ªÉ tr√°nh qu√° t·∫£i RAM

face_params = {
    'pano_f': lambda x, y, z: ( x,  y,  z),    # front
    'pano_r': lambda x, y, z: ( z,  y, -x),    # right
    'pano_b': lambda x, y, z: (-x,  y, -z),    # back
    'pano_l': lambda x, y, z: (-z,  y,  x),    # left
    'pano_d': lambda x, y, z: ( x,  z, -y),    # up
    'pano_u': lambda x, y, z: ( x, -z,  y),    # down
}

def resize_panorama_fast(image, target_width=6144, target_height=3072):
    """
    Resize panorama v·ªõi t·ª∑ l·ªá cao h∆°n ƒë·ªÉ c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng
    """
    return cv2.resize(image, (target_width, target_height), interpolation=cv2.INTER_LANCZOS4)

def vector_to_spherical(x, y, z):
    theta = atan2(x, z)  # longitude
    phi = asin(y)        # latitude
    return theta, phi

def create_cube_face_optimized(pano_img, face, size):
    """
    T·ªëi ∆∞u h√≥a vi·ªác t·∫°o cube face b·∫±ng c√°ch s·ª≠ d·ª•ng numpy vectorization
    """
    h, w = pano_img.shape[:2]
    
    # T·∫°o grid coordinates m·ªôt l·∫ßn
    y_coords, x_coords = np.mgrid[0:size, 0:size]
    
    # Normalize coordinates
    nx = (2 * x_coords / size) - 1
    ny = (2 * y_coords / size) - 1
    
    # Calculate vectors
    length = np.sqrt(nx*nx + ny*ny + 1)
    
    # Apply face transformation
    face_func = face_params[face]
    vx, vy, vz = face_func(nx, ny, np.ones_like(nx))
    
    # Normalize vectors
    vx = vx / length
    vy = vy / length
    vz = vz / length
    
    # Convert to spherical coordinates
    theta = np.arctan2(vx, vz)
    phi = np.arcsin(vy)
    
    # Convert to image coordinates
    uf = 0.5 * (theta / pi + 1)
    vf = 0.5 * (phi / (pi/2) + 1)
    
    px = (uf * (w - 1)).astype(np.int32)
    py = ((1 - vf) * (h - 1)).astype(np.int32)
    
    # Clamp coordinates
    px = np.clip(px, 0, w-1)
    py = np.clip(py, 0, h-1)
    
    # Sample from panorama
    face_img = pano_img[py, px]
    
    return face_img

def create_cube_face_batch(args):
    """
    Wrapper function for multiprocessing
    """
    pano_img, face, size = args
    return face, create_cube_face_optimized(pano_img, face, size)

def rotate_image(img, angle):
    if angle == 0:
        return img
    h, w = img.shape[:2]
    center = (w // 2, h // 2)
    M = cv2.getRotationMatrix2D(center, angle, 1.0)
    rotated = cv2.warpAffine(img, M, (w, h))
    return rotated

def correct_rotation(face, img):
    rotation_angles = {
        'pano_f': 0,
        'pano_l': 0,
        'pano_r': 0,
        'pano_u': 0,
        'pano_d': 0,
        'pano_b': 0
    }
    angle = rotation_angles.get(face, 0)
    return rotate_image(img, angle)

def create_preview_image_fast(faces_dict, output_folder, preview_size=(256, 1536)):
    """
    T·∫°o preview nhanh h∆°n v·ªõi threading v√† ch·∫•t l∆∞·ª£ng cao h∆°n
    """
    width, height = preview_size
    face_height = height // 6
    face_width = width

    preview_img = np.zeros((height, width, 3), dtype=np.uint8)
    order = ['pano_r', 'pano_f', 'pano_l', 'pano_b', 'pano_u', 'pano_d']

    def resize_face(i, face):
        img = faces_dict.get(face)
        if img is not None:
            resized = cv2.resize(img, (face_width, face_height), interpolation=cv2.INTER_LANCZOS4)
            preview_img[i*face_height:(i+1)*face_height, 0:face_width] = resized

    # S·ª≠ d·ª•ng threading ƒë·ªÉ resize parallel
    threads = []
    for i, face in enumerate(order):
        thread = threading.Thread(target=resize_face, args=(i, face))
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

    preview_path = os.path.join(output_folder, "preview.jpg")
    cv2.imwrite(preview_path, preview_img, [cv2.IMWRITE_JPEG_QUALITY, 100])
    return preview_path

def create_thumbnail_fast(face_img, output_folder, size=(360, 360)):
    thumb_img = cv2.resize(face_img, size, interpolation=cv2.INTER_LANCZOS4)
    thumb_path = os.path.join(output_folder, "thumb.jpg")
    cv2.imwrite(thumb_path, thumb_img, [cv2.IMWRITE_JPEG_QUALITY, 95])
    return thumb_path

def convert_spherical_to_cube_optimized(input_path, output_folder, size=CUBE_SIZE):
    """
    Phi√™n b·∫£n t·ªëi ∆∞u v·ªõi multiprocessing cho c√°c cube faces
    """
    pano_img = cv2.imread(input_path)
    if pano_img is None:
        print(f"‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ·∫£nh {input_path}")
        return False

    # Gi·ªØ nguy√™n ƒë·ªô ph√¢n gi·∫£i ·∫£nh ƒë·ªÉ ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t
    # Ch·ªâ resize n·∫øu ·∫£nh qu√° l·ªõn v√† c√≥ th·ªÉ g√¢y l·ªói b·ªô nh·ªõ
    h, w = pano_img.shape[:2]
    if w > 8192 or h > 4096:
        pano_img = resize_panorama_fast(pano_img, 6144, 3072)
    
    # Xoay l·∫≠t pano 180 ƒë·ªô
    pano_img = cv2.rotate(pano_img, cv2.ROTATE_180)

    os.makedirs(output_folder, exist_ok=True)

    # S·ª≠ d·ª•ng multiprocessing ƒë·ªÉ t·∫°o c√°c cube faces
    with ProcessPoolExecutor(max_workers=min(6, MAX_WORKERS)) as executor:
        face_args = [(pano_img, face, size) for face in face_params.keys()]
        results = list(executor.map(create_cube_face_batch, face_args))

    faces_images = {}
    
    # L∆∞u c√°c face images
    for face, face_img in results:
        face_img = correct_rotation(face, face_img)
        out_file = os.path.join(output_folder, f"{face}.jpg")
        
        # S·ª≠ d·ª•ng threading ƒë·ªÉ l∆∞u file
        def save_image(path, img):
            cv2.imwrite(path, img, [cv2.IMWRITE_JPEG_QUALITY, 100])
        
        threading.Thread(target=save_image, args=(out_file, face_img)).start()
        faces_images[face] = face_img

    # T·∫°o preview v√† thumbnail
    create_preview_image_fast(faces_images, output_folder)
    create_thumbnail_fast(faces_images['pano_f'], output_folder)

    return True

def process_single_image(args):
    """
    Wrapper function ƒë·ªÉ x·ª≠ l√Ω m·ªôt ·∫£nh trong multiprocessing
    """
    input_path, panosuser_folder, size = args
    
    image_name = os.path.splitext(os.path.basename(input_path))[0]
    output_dir = os.path.join(panosuser_folder, image_name)
    
    print(f"üõ† ƒêang x·ª≠ l√Ω {input_path}")
    success = convert_spherical_to_cube_optimized(input_path, output_dir, size)
    
    if success:
        return {
            'name': image_name,
            'input_path': input_path,
            'output_path': output_dir
        }
    return None

def create_krpano_xml(processed_images, output_folder, title="funny vtour"):
    """
    T·∫°o file XML krpano
    """
    # T·∫°o th∆∞ m·ª•c cho panosuser ngay trong output_folder
    panosuser_folder = os.path.join(output_folder, "panosuser")
    os.makedirs(panosuser_folder, exist_ok=True)
    
    doc = minidom.Document()
    root = doc.createElement('krpano')
    root.setAttribute('title', title)
    doc.appendChild(root)

    version = doc.createElement('version')
    version_text = doc.createTextNode(f"Generated on {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    version.appendChild(version_text)
    root.appendChild(version)
    
    include = doc.createElement('include')
    include.setAttribute('url', '/api/phanmengoc/skin/vtourskin.xml')
    include2 = doc.createElement('include')
    include2.setAttribute('url', '/api/phanmengoc/skin/vtourskin_design_flat_light.xml')
    root.appendChild(include)
    root.appendChild(include2)
    
    for img_info in processed_images:
        image_name = img_info['name']
        
        scene = doc.createElement('scene')
        scene.setAttribute('name',f'funny_{image_name}')
        scene.setAttribute('title', image_name)
        scene.setAttribute('onstart', '')
        scene.setAttribute('thumburl', f'panosuser/{image_name}/thumb.jpg')
        scene.setAttribute('lat', '')
        scene.setAttribute('lng', '')
        scene.setAttribute('alt', '')
        scene.setAttribute('heading', '')
        
        control = doc.createElement('control')
        control.setAttribute('bouncinglimits', 'calc:image.cube ? true : false')
        scene.appendChild(control)
        
        view = doc.createElement('view')
        view.setAttribute('hlookat', '0.0')
        view.setAttribute('vlookat', '0.0')
        view.setAttribute('fovtype', 'MFOV')
        view.setAttribute('fov', '120')
        view.setAttribute('maxpixelzoom', '2.0')
        view.setAttribute('fovmin', '70')
        view.setAttribute('fovmax', '140')
        view.setAttribute('limitview', 'auto')
        scene.appendChild(view)
        
        preview = doc.createElement('preview')
        preview.setAttribute('url', f'panosuser/{image_name}/preview.jpg')
        scene.appendChild(preview)
        
        image = doc.createElement('image')
        cube = doc.createElement('cube')
        cube.setAttribute('url', f'panosuser/{image_name}/pano_%s.jpg')
        image.appendChild(cube)
        scene.appendChild(image)
        
        root.appendChild(scene)
    
    root.appendChild(doc.createComment('scene ti·∫øp theo'))
    
    xml_path = os.path.join(output_folder, "user1.xml")
    with open(xml_path, 'w', encoding='utf-8') as f:
        xml_str = doc.toprettyxml(indent='\t')
        f.write(xml_str)
    
    print(f"‚úÖ ƒê√£ t·∫°o file XML cho krpano t·∫°i {xml_path}")
    return xml_path

def create_krpano_html(output_folder, title="Tools Krpano Funny"):
    """
    T·∫°o file HTML krpano
    """
    html_content = f"""<!DOCTYPE html>
<html>
<head>
	<title>{title}</title>
	<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, viewport-fit=cover" />
	<meta name="apple-mobile-web-app-capable" content="yes" />
	<meta name="apple-mobile-web-app-status-bar-style" content="black" />
	<meta name="mobile-web-app-capable" content="yes" />
	<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
	<meta http-equiv="x-ua-compatible" content="IE=edge" />
	<style>
		html {{ height:100%; }}
		body {{ height:100%; overflow:hidden; margin:0; padding:0; font-family:Arial, Helvetica, sans-serif; font-size:16px; color:#FFFFFF; background-color:#000000; }}
	</style>
</head>
<body>

<script src="/api/phanmengoc/funny.js"></script>

<div id="pano" style="width:100%;height:100%;">
	<noscript><table style="width:100%;height:100%;"><tr style="vertical-align:middle;"><td><div style="text-align:center;">ERROR:<br/><br/>Javascript not activated<br/><br/></div></td></tr></table></noscript>
	<script>
		embedpano({{xml:"user1.xml", target:"pano", passQueryParameters:"startscene,startlookat"}});
	</script>
</div>

</body>
</html>
"""
    html_path = os.path.join(output_folder, "Toolstour.html")
    with open(html_path, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    print(f"‚úÖ ƒê√£ t·∫°o file HTML cho krpano t·∫°i {html_path}")
    return html_path

def batch_convert_optimized(input_folder, output_folder, size=CUBE_SIZE, title="funny vtour"):
    """
    Phi√™n b·∫£n t·ªëi ∆∞u v·ªõi multiprocessing cho batch processing
    """
    supported = ('*.jpg', '*.jpeg', '*.png', '*.JPG', '*.JPEG', '*.PNG')
    files = []
    for ext in supported:
        files += glob(os.path.join(input_folder, ext))
    
    # Lo·∫°i b·ªè c√°c file tr√πng l·∫∑p
    files = list(set(files))

    if not files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh panorama trong th∆∞ m·ª•c.")
        return

    print(f"üìÅ T√¨m th·∫•y {len(files)} ·∫£nh. ƒêang x·ª≠ l√Ω v·ªõi {MAX_WORKERS} workers...")

    # T·∫°o th∆∞ m·ª•c panosuser trong output_folder
    panosuser_folder = os.path.join(output_folder, "panosuser")
    os.makedirs(panosuser_folder, exist_ok=True)

    # S·ª≠ d·ª•ng multiprocessing ƒë·ªÉ x·ª≠ l√Ω nhi·ªÅu ·∫£nh c√πng l√∫c
    with ProcessPoolExecutor(max_workers=MAX_WORKERS) as executor:
        process_args = [(f, panosuser_folder, size) for f in files]
        results = list(executor.map(process_single_image, process_args))

    # L·ªçc k·∫øt qu·∫£ th√†nh c√¥ng
    processed_images = [r for r in results if r is not None]
    
    # T·∫°o XML v√† HTML
    if processed_images:
        xml_path = create_krpano_xml(processed_images, output_folder, title)
        html_path = create_krpano_html(output_folder, f"Tools Krpano {title}")
        
        # X√≥a th∆∞ m·ª•c usertools n·∫øu n√≥ ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông
        usertools_path = os.path.join(output_folder, "usertools")
        if os.path.exists(usertools_path):
            try:
                shutil.rmtree(usertools_path)
                print(f"‚úÖ ƒê√£ x√≥a th∆∞ m·ª•c kh√¥ng c·∫ßn thi·∫øt: {usertools_path}")
            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a th∆∞ m·ª•c {usertools_path}: {str(e)}")
                
        print(f"üéâ ƒê√£ x·ª≠ l√Ω xong {len(processed_images)}/{len(files)} ·∫£nh panorama")
    else:
        print("‚ö†Ô∏è Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng")

def is_image_file(file_path):
    """Check if file is an image based on extension"""
    if not os.path.isfile(file_path):
        return False
    _, ext = os.path.splitext(file_path.lower())
    return ext in ['.jpg', '.jpeg', '.png']

def select_input_with_dialog():
    """
    Hi·ªÉn th·ªã h·ªôp tho·∫°i ƒë·ªÉ ch·ªçn file ho·∫∑c th∆∞ m·ª•c ƒë·∫ßu v√†o
    """
    root = tk.Tk()
    root.withdraw()  # ·∫®n c·ª≠a s·ªï ch√≠nh
    
    choice = input("Ch·ªçn lo·∫°i ƒë·∫ßu v√†o (1: File ·∫£nh, 2: Th∆∞ m·ª•c ch·ª©a ·∫£nh): ")
    
    if choice == "1":
        # Ch·ªçn file ·∫£nh
        filetypes = [
            ("Image files", "*.jpg;*.jpeg;*.png"),
            ("JPEG files", "*.jpg;*.jpeg"),
            ("PNG files", "*.png"),
            ("All files", "*.*")
        ]
        input_path = filedialog.askopenfilename(
            title="Ch·ªçn ·∫£nh panorama",
            filetypes=filetypes
        )
    else:
        # Ch·ªçn th∆∞ m·ª•c
        input_path = filedialog.askdirectory(
            title="Ch·ªçn th∆∞ m·ª•c ch·ª©a ·∫£nh panorama"
        )
    
    if input_path:
        return input_path
    else:
        print("‚ùå Kh√¥ng c√≥ ƒë·∫ßu v√†o n√†o ƒë∆∞·ª£c ch·ªçn.")
        sys.exit(1)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Chuy·ªÉn ƒë·ªïi ·∫£nh panorama sang c√°c m·∫∑t c·ªßa h√¨nh l·∫≠p ph∆∞∆°ng (T·ªëi ∆∞u h√≥a)")
    parser.add_argument("input", help="ƒê∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh panorama ho·∫∑c th∆∞ m·ª•c ch·ª©a ·∫£nh", nargs="?", default=None)
    parser.add_argument("-size", type=int, default=CUBE_SIZE, help=f"K√≠ch th∆∞·ªõc m·ªói m·∫∑t (m·∫∑c ƒë·ªãnh: {CUBE_SIZE})")
    parser.add_argument("-title", type=str, default="funny vtour", help="Ti√™u ƒë·ªÅ cho tour (m·∫∑c ƒë·ªãnh: funny vtour)")
    parser.add_argument("-workers", type=int, default=MAX_WORKERS, help=f"S·ªë worker x·ª≠ l√Ω (m·∫∑c ƒë·ªãnh: {MAX_WORKERS})")
    parser.add_argument("-dialog", action="store_true", help="S·ª≠ d·ª•ng h·ªôp tho·∫°i ƒë·ªÉ ch·ªçn ƒë·∫ßu v√†o")
    
    args = parser.parse_args()
    input_path = args.input
    tour_title = args.title
    MAX_WORKERS = min(args.workers, cpu_count())
    
    # S·ª≠ d·ª•ng h·ªôp tho·∫°i n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu ho·∫∑c kh√¥ng c√≥ ƒë·∫ßu v√†o
    if args.dialog or input_path is None:
        input_path = select_input_with_dialog()
    
    print(f"üöÄ S·ª≠ d·ª•ng {MAX_WORKERS} workers ƒë·ªÉ x·ª≠ l√Ω")
    
    if os.path.isdir(input_path):
        print(f"üîç X·ª≠ l√Ω th∆∞ m·ª•c: {input_path}")
        output_folder = "./funnypanos"
        batch_convert_optimized(input_path, output_folder, args.size, tour_title)
    elif is_image_file(input_path):
        print(f"üîç X·ª≠ l√Ω ·∫£nh ƒë∆°n: {input_path}")
        output_folder = "./output_cubes"
        image_name = os.path.splitext(os.path.basename(input_path))[0]
        
        # T·∫°o th∆∞ m·ª•c panosuser tr·ª±c ti·∫øp trong output_folder
        panosuser_folder = os.path.join(output_folder, "panosuser")
        os.makedirs(panosuser_folder, exist_ok=True)
        
        output_path = os.path.join(panosuser_folder, image_name)
        success = convert_spherical_to_cube_optimized(input_path, output_path, args.size)
        
        if success:
            processed_images = [{
                'name': image_name,
                'input_path': input_path,
                'output_path': output_path
            }]
            xml_path = create_krpano_xml(processed_images, output_folder, tour_title)
            html_path = create_krpano_html(output_folder, f"Tools Krpano {tour_title}")
            
            # X√≥a th∆∞ m·ª•c usertools n·∫øu n√≥ ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông
            usertools_path = os.path.join(output_folder, "usertools")
            if os.path.exists(usertools_path):
                try:
                    shutil.rmtree(usertools_path)
                    print(f"‚úÖ ƒê√£ x√≥a th∆∞ m·ª•c kh√¥ng c·∫ßn thi·∫øt: {usertools_path}")
                except Exception as e:
                    print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a th∆∞ m·ª•c {usertools_path}: {str(e)}")
            
            print(f"üéâ ·∫¢nh ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng")
    else:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh ho·∫∑c th∆∞ m·ª•c: {input_path}")
        sys.exit(1)